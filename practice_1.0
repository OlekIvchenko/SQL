/*
	Lesson 1 -  Basic SQL. 
    Date: 2024-07-14
	Start with Sql. Basic - Sql
		1. –¢–∏–ø–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä—ñ–≤
		2. –ö–ª—é—á–µ–≤–æ —Å–ª–æ–≤–æ Use, SELECT
		3. –û–ø–µ—Ä–∞—Ç–æ—Ä *, —Ç–∞ –≤–∏–±—ñ—Ä –∫–æ–ª–æ–Ω –∑ —Ç–∞–±–ª–∏—Ü—ñ
		4. Where - –±–ª–æ–∫, AND/OR  
		5. In/Not In - –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏
		6. LIKE/BETWEEN - –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ LIKE(statement _ or %)
		7. Is null/is not null
    
    Materials:
		1. https://www.w3schools.com/mysql/default.asp
        2. https://dev.mysql.com/doc/refman/8.0/en/
        3. https://www.sqlstyle.guide - Style Guide
        4. https://www.hackerrank.com - practise every day
*/

/*
	SQL - Sequence Query Language, –º–æ–≤–∞ –∑–∞–ø–∏—Ç—ñ–≤ 
    SQL - style guide:
		1. Write clear and reablity code:  Key-word in UPPERCASE, any other words in lowercase
		2. Comment your code to explain other what you code do 
        3. Start new line code all time
        4. Two tab between code or more
*/

# Select - basic  command to return  table 
SELECT "SLOVO";

SELECT 5 + 5;

USE employees;


SELECT  *
FROM   employees;


SELECT *
FROM employees.employees;


SELECT # –æ–±—Ä–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
	emp_no, first_name, last_name
FROM 
	employees;


select
emp_no, first_name, last_name
FrOm 
employees;

select *
from employees;


# //// TO RE-DO 

# One line comment, will ignore by SQL, üòÉ
-- One line comment, will ignore by sql 

/*
	Text information that will ignore by Sql 
    More than one line 
	 –¢–µ–∫—Å—Ç 
     —Ç–µ–∫—Å—Ç 
     —Ç–µ–∫—Å—Ç 
*/


SELECT 4 * 2;

USE employees; # Statement to use DB 


SHOW TABLES; # Command that display all tables in DB

SELECT * FROM employees;

SELECT first_name, last_name 
FROM employees;


SELECT *
FROM salaries;


SELECT 
    *
FROM
    employees.employees;


SELECT dept_no
FROM departments;

# Operand - 
# Operation - –¥—ñ—è ,  Unary:  not value, +/- 
# Binary : +, -, /, *, pow, %, 
# Ternar 
select -1 + 1;

# and, or, not 
# and -> True and True
# or -> (True, False), (False, True), (True, True) 
# not True -> False, not False -> True
SELECT *
FROM titles
WHERE emp_no < 10050 and emp_no > 10010;

SELECT 5 <> 10, 5 != 10, 5 = 5;
# 2 > 1, yes - True, 1 > 2 , no - False
# Comparison operator: >, >=, <, <=, !=, <>, =
# To use more condition need to use AND/OR. AND - left + right statement true, OR - left of right statement false
# AND: 2 > 1 AND 1 != 2  -> TRUE 
# OR: 2 > 1 OR 1 > 3 -> TRUE
SELECT 
    * # Operator to return all information in table
FROM
    employees.employees
WHERE  # Filtered date on some condi, 
emp_no = 10001 
 OR emp_no = 10002 
 OR emp_no = 10003; # 10001, 10002, 10003
 
 
SELECT *
FROM employees;


SELECT *
FROM salaries
WHERE emp_no = 10001 OR emp_no = 10002;


/*
	Slide 7
    Task 1: Retrieve a list with all female employees whose first name is Kellie.
	Task 2: Select a list of male employees
    whose first name is ‚ÄòMark‚Äô and all employees whose last name is ‚ÄòLuit‚Äô
*/

# Task 1. Step 1. 
SELECT *
FROM employees;

# Step 2. Add statement on female
SELECT *
FROM employees
WHERE gender  = 'F';


# Step 3. Add and condio 
SELECT *
FROM employees
WHERE gender  = 'F'  AND first_name = 'Kellie';



SELECT first_name 
FROM employees;

SELECT * FROM 
employees
WHERE gender = 'F';

SELECT (2 + 2 ) * 2; # 6 use scores, for prior

SELECT 
*
FROM employees
WHERE gender = 'F' AND first_name = 'Kellie';

# Task 1(Var1)
SELECT 
*
FROM 
employees.employees 
WHERE first_name = 'Kellie' AND gender = 'F';


# Task 2
SELECT
*
FROM 
employees.employees 
WHERE (first_name = 'Mark' OR last_name = 'Luit') AND gender = 'M' ;


SELECT
*
FROM 
employees.employees 
WHERE first_name = 'Mark' AND gender = 'M'  OR last_name = 'Luit';


/*
	Slide 9
    Retrieve a list with all employees whose first name is either Kellie or Aruna
*/
SELECT 
    *
FROM
    employees
WHERE
    first_name = 'Kelie' OR first_name = 'Aruna';


/*
	Slide 11
    Retrieve a list with all female employees whose first name is
	either Kellie or Aruna.
*/
SELECT 
*
FROM 
employees 
WHERE (first_name = 'Kellie' OR first_name = 'Aruna') AND gender = 'F';




# In - (item1, item2, ... itemN)  –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó 
# Not In (item1, item2, ... itemN) –Ω–µ –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó
SELECT *
FROM employees
WHERE first_name IN ('Kellie', 'Aruna') AND gender = 'F';


SELECT 
	*
FROM 
	employees
WHERE
	first_name  NOT IN ('Kellie', 'Aruna') AND gender = 'F';

/*
	Slide 13
	Task 1: Use the IN operator to select all individuals from the ‚Äúemployees‚Äù table, whose first name is either ‚ÄúDenis‚Äù, or ‚ÄúElvis‚Äù.
	Task 2: Extract all records from the ‚Äòemployees‚Äô table, aside from 
    those with employees named John, Mark, or Jacob.
*/
# Task 1
SELECT
*
FROM 
employees
WHERE first_name IN ('Denis', 'Elvis');


SELECT
*
FROM 
employees
WHERE first_name =  'Denis' OR first_name =  'Elvis';


# Task 2
SELECT *
FROM employees.employees
WHERE first_name NOT IN ('John', 'Marc', 'Jacob');


/*
	 LIKE -  —Å—Ö–æ–∂–∏–π –Ω–∞ 
     _ - –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª 
     % - –±—É–¥—å-—è–∫–∞ —Å–∏–º–≤–æ–ª—ñ–≤
*/
SELECT *
FROM  employees
WHERE last_name LIKE 'P____';

SELECT *
FROM  employees
WHERE last_name LIKE 'P_a_';


SELECT *
FROM  employees
WHERE last_name NOT  LIKE '&P____';


SELECT *
FROM employees.employees
WHERE first_name LIKE 'Mar%' ;


SELECT *
FROM employees.employees
WHERE first_name LIKE '%ar%' ;


SELECT *
FROM employees.employees
WHERE first_name NOT LIKE '%a' ;


/*
	Slide 15
	Task 1: Working with the ‚Äúemployees‚Äù table, use the LIKE operator to select the data
	about all individuals, whose first name starts with ‚ÄúMark‚Äù; specify that the name can be succeeded by any sequence of characters.

	Task 2: Retrieve a list with all employees who have been hired in the year 2000.

	Task 3: Retrieve a list with all employees whose employee number is written with 5
	characters, and starts with ‚Äú1000‚Äù.
*/

# Task 1
SELECT * FROM employees 
WHERE first_name LIKE 'Mark%';

# Task 2
SELECT  * FROM employees
WHERE hire_date LIKE '2_00%';

# Task 3
SELECT * FROM employees
WHERE emp_no LIKE '1000_';


/*
	Slide 17
	Task 1: Extract all individuals from the ‚Äòemployees‚Äô table whose first name contains ‚ÄúJack‚Äù.
	Task 2: Once you have done that, extract another list containing the names of employees that do not contain ‚ÄúJack‚Äù.
*/
SELECT*
FROM employees
WHERE first_name LIKE ('%Jack%');


SELECT*
FROM employees
WHERE first_name NOT LIKE ('%Jack%');

# Task 1
SELECT 
*
FROM employees
WHERE first_name LIKE '%Jack%';

# Task 2
SELECT 
*
FROM employees
WHERE first_name NOT LIKE '%Jack%';


/*
	Between - min AND max -> []
	>=, <=
*/

SELECT * 
FROM employees
WHERE emp_no  BETWEEN 10001 AND  10050;


SELECT 
* 
FROM employees
WHERE emp_no NOT BETWEEN 10001 AND 10050;


/*

	Slide 19
    Task 1: Select all the information from the ‚Äúsalaries‚Äù table regarding contracts from 66,000 to 70,000 dollars per year.
	Task 2: Retrieve a list with all individuals whose employee number is not between ‚Äò10004‚Äô and ‚Äò10012‚Äô.
	Task 3: Select the names of all departments with numbers between ‚Äòd003‚Äô and ‚Äòd006‚Äô.
*/
SHOW TABLES;


SELECT * 
FROM salaries;

# 1, 2,3,4,5,6,7,8,9, 0
# d003 d004 d004  d005 d006
SELECT *
FROM departments;

SELECT 
* 
FROM salaries;

# Task 1
SELECT * 
FROM salaries
WHERE salary BETWEEN 66000 AND 70000;


# Task 2
SELECT * 
FROM employees
WHERE emp_no NOT BETWEEN 10004 AND 10012;


# Task 3
SELECT * 
FROM departments
WHERE dept_no BETWEEN 'd003' AND 'd006';



# IS NULL ¬†- ¬†¬†–ø—É—Å—Ç–µ, IS NOT NULL

SELECT ee.* , es.*
FROM employees AS ee
LEFT JOIN salaries AS es  USING(emp_no)
WHERE es.emp_no IS  NOT NULL;

SELECT * 
FROM employees
WHERE emp_no IS  NULL;


# LIKE - match result, have  two statement _ , %: _ - match one any symbol, % - match inf symbol 

/*
	Slide 21
    Task 1: Select the names of all departments whose department number value is not null and 
    names have ‚Äòa‚Äô character on any position or ‚Äòe‚Äô on the second place.
*/
SELECT
* 
FROM 
departments
WHERE 
(dept_name LIKE '%a%' 
OR  
dept_name LIKE '_e%')
AND dept_no IS NOT NULL
ORDER BY dept_no DESC;


# Order by - sorted - Asc, Desc, 

SELECT * 
FROM employees
WHERE hire_date >= '1986-01-01';


SELECT * 
FROM employees
WHERE hire_date < '1986-01-01';

SELECT * 
FROM salaries
WHERE emp_no = 10001;


/*
	Slide 23
    Task 1: Retrieve a list with data about all female employees who were hired in the year 2000 or after.
	Task 2: Extract a list with all employees‚Äô salaries higher than $150,000 per annum.
*/
# Task 1
SELECT 
* 
FROM 
employees
WHERE gender = 'F' and hire_date LIKE '2%';


SELECT * 
FROM employees
WHERE gender = 'F' and hire_date >= '2000-01-01';


SELECT 
* 
FROM 
employees
WHERE gender = 'F' and YEAR(hire_date) >= 2000;


# Task 2
SELECT 
*
FROM 
salaries
WHERE salary > 150000;




# ORDER BY - —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ASC, DESC - –ø–æ –∑–∞–º–æ–≤—á ASC
SELECT emp_no, first_name, last_name
FROM employees 
ORDER BY first_name; -- Asc


SELECT emp_no, first_name, last_name
FROM employees 
ORDER BY first_name DESC ; 


SELECT emp_no, first_name, last_name
FROM employees 
ORDER BY first_name ASC ,  emp_no DESC; 


# Limit - –≤–∫–∞–∑—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å  —Ä—è–¥–∫—ñ–≤ —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏, –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ N - pass, M - return
SELECT emp_no, first_name, last_name
FROM employees 
ORDER BY emp_no ASC
LIMIT 10 ; 


SELECT emp_no, first_name, last_name
FROM employees 
ORDER BY emp_no ASC
LIMIT 5, 10 ;


SELECT *
FROM salaries
ORDER BY salary DESC
LIMIT 1;


# ¬†¬†–ó–Ω–∞–π—Ç–∏ 2 –Ω–∞–π–±—ñ–ª—å—à—É –∑–ø
SELECT *
FROM salaries 
ORDER BY salary DESC
LIMIT 1, 1;


DESC salaries;
