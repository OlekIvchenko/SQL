/*
	Lesson 9. 
    Date: 2024-08-11

    Topics:
        1. CTE
        2. Rand
        3. Substrings/ Reverse

    Materials: 
		1. CTE: https://www.freecodecamp.org/news/mysql-common-table-expressions/
        
*/
USE employees;



SELECT * FROM
 employees.employees;

# CTE - common table expression 
/*
		WITH - ключове слово
        назва для CTE 
        (колонка один alias, etc) - перераховуємо колонки та псевдоніми 
        AS (
        )
*/

WITH testCTE(full_name, id) # Створюємо CTE з назвою testCTE(full_name - псевдонім по колонці)
AS 
	( 
    SELECT
		CONCAT(first_name, ' ' ,last_name), emp_no
    FROM 
		employees.employees
)
SELECT ee.*, tCte.full_name
 FROM 
	employees AS ee
 INNER JOIN
	testCTE AS tCte ON(ee.emp_no = tCte.id); # Викликаємо cte


WITH all_sim_name AS (
	SELECT * 
    FROM employees 
    WHERE first_name = last_name
)

SELECT *
FROM all_sim_name;


WITH testMaleCTE(id, first_name, last_name, gender, type, time_t) # Перераховуємо колонки і їх alias 
AS 
	( 
    SELECT emp_no, first_name, last_name, gender, 'Male', now()
    FROM employees.employees
    WHERE gender = 'M' AND emp_no BETWEEN 10050 AND 10060
)
SELECT * 
FROM employees AS ee
INNER JOIN testMaleCTE AS tmCte ON(ee.emp_no = tmCte.id);


WITH testFemaleCTE(id, first_name, last_name, gender, type)
AS (
	SELECT emp_no, first_name, last_name, gender, 'Female'
    FROM employees.employees
    WHERE gender = 'F' AND emp_no < 10050
)
 
SELECT  * FROM
testFemaleCTE;


WITH testMaleCTE(id, first_name, last_name, gender, type) # Перераховуємо колонки і їх alias 
AS 
	( 
    SELECT emp_no, first_name, last_name, gender, 'Male'
    FROM employees.employees
    WHERE gender = 'M' AND emp_no BETWEEN 10050 AND 10060
)
, testFemaleCTE(id, first_name, last_name, gender, type)
AS (
	SELECT emp_no, first_name, last_name, gender, 'Female'
    FROM employees.employees
    WHERE gender = 'F' AND emp_no < 10050
)

SELECT *  FROM 
	 testFemaleCTE
UNION ALL
SELECT * FROM 
	testMaleCTE;



SELECT * FROM
employees.salaries;

	
WITH avg_maleCTE(avg_male)
AS (
	SELECT AVG(salary)
    FROM employees.salaries
	WHERE emp_no IN ( SELECT emp_no FROM employees.employees WHERE gender = 'M')
    ),
avg_femaleCTE(avg_female)
AS (
	SELECT AVG(salary)
    FROM employees.salaries
	WHERE emp_no IN ( SELECT emp_no FROM employees.employees WHERE gender = 'F')
)

SELECT av.avg_male - af.avg_female,  avg_female, avg_male
FROM avg_maleCTE as av, avg_femaleCTE as af ;


SELECT 
	(SELECT AVG(salary)
    FROM employees.salaries
	WHERE emp_no IN ( SELECT emp_no FROM employees.employees WHERE gender = 'M')) 
    - 
(
	SELECT AVG(salary)
    FROM employees.salaries
	WHERE emp_no IN ( SELECT emp_no FROM employees.employees WHERE gender = 'F')
);


/*
 Task 1: Вивезти максимальну ЗП по співробітниках в кого id менше ніж 10050,  і мінімальну зп в  діапазоні 10051 та 10099 
 use cte 
 *Додати колонку type - де буде значення min/max
 */
SELECT emp_no, max(salary) AS ms
 FROM salaries
 WHERE emp_no < 10050
 GROUP BY emp_no
 ORDER BY  ms DESC;
 
 SELECT MAX(salary)
 FROM salaries
 WHERE emp_no < 10050;
 


WITH max_value_in_idCTE(emp_no, max_value, type)
AS (
	SELECT emp_no, MAX(salary), 'max value'
    FROM employees.salaries
	WHERE emp_no  < 10050
    GROUP BY emp_no
)
, min_value_CTE(emp_no, min_value, type)
AS (
	SELECT emp_no, MIN(salary), 'min value'
    FROM employees.salaries
	WHERE emp_no BETWEEN 10051 AND 10099
    GROUP BY emp_no
    )

SELECT *
FROM max_value_in_idCTE
UNION ALL
SELECT *
FROM min_value_CTE
;




# Рекурсия  - виклик функцій сам себе 
# Факторіал !5 = 1 * 2 * 3 * 4 * 5 = 120
SET SESSION cte_max_recursion_depth = 21;  

WITH RECURSIVE testRecursive(n, name) # n - порядкове значення,  з чим порівнюється
AS (
		SELECT 1,1 
        UNION
        SELECT n +1, name * (n + 1)
        FROM testRecursive
		WHERE n < 20
	-- LIMIT 20
)

SELECT *
FROM testRecursive;

SET @start_date = '2024-08-01' ;
SET @end_date = '2024-08-31';

WITH RECURSIVE month_ AS (
	SELECT @start_date as start_
    UNION 
    SELECT 
		DATE_ADD(start_, interval 1 day) 
    FROM month_
    WHERE start_ < @end_date
)
SELECT *
FROM month_
;

WITH RECURSIVE month_ AS (
	SELECT @end_date as start_
    UNION 
    SELECT 
		DATE_ADD(start_, interval -1 day) 
    FROM month_
    WHERE start_ > @start_date
)
SELECT *
FROM month_
;

WITH RECURSIVE salaryCTE AS (
	SELECT 
		d.dept_name, MAX(salary) AS mx_salary
	FROM 
		salaries AS es 
    INNER JOIN  
		dept_emp AS de ON es.emp_no = de.emp_no
    INNER JOIN 
		departments AS d ON de.dept_no = d.dept_no
    GROUP BY d.dept_name
   ORDER BY mx_salary DESC
)
, rankCTE AS (
	SELECT dept_name, mx_salary, ROW_NUMBER() OVER () AS rnk 
    FROM salaryCTE
)
SELECT *
FROM rankCTE;

/* 
		Rand  - generate diaposon of 0 to 1 (math [  ) )
        seed - repr you value
        RAND( [seed]) -> RAND(5), 5 is seed
*/
SELECT RAND(); 

SELECT rand(), rand(), rand(); 

SELECT RAND(10);  # '0.6570515219653505'

SELECT RAND(10), RAND(10), RAND(-5);


SELECT FLOOR(RAND()*(100 - 1)) * 1000;

SELECT FLOOR(RAND()*(10 - 5) + 5); # диапозон від 5 до 10

SELECT FLOOR(RAND()*(10 - 5 + 1)+5) ;

SELECT FLOOR(RAND()*(10-5+1) + 5) * 1000;

SELECT FLOOR(RAND() * 1000);

# SELECT RAND()*(b - a ) + a; a - звідки, b до куди

SELECT FLOOR(RAND()*(10090 - 10001)+10001);

SELECT *
FROM employees.employees
WHERE emp_no IN ( FLOOR(RAND()*(10090-10001)+10001)); #  Приклад

SELECT *
FROM employees
ORDER BY RAND()
LIMIT 10;

SELECT *
FROM employees
WHERE emp_no BETWEEN 10010 AND 10190 # range  
ORDER BY  RAND() 
LIMIT 10; # Скільки


WITH random_value(id) AS (
SELECT emp_no
FROM employees
WHERE emp_no BETWEEN 10001 AND 10090
ORDER BY  RAND()
LIMIT 15
)

SELECT *
FROM employees 
WHERE emp_no IN (SELECT * FROM random_value ORDER BY id);



# Rand - Вивести  рандомних співробітників 
SELECT * 
FROM employees 
WHERE emp_no =  FLOOR(RAND()*(10090-10001) + 10001);
                                    


/*
			SUBSTRING, SUBSTR
            (string, start_position, number_of_char) -> ('Hello World!', 1, 5) -> Hello
            All string methods: https://dev.mysql.com/doc/refman/8.0/en/string-functions.html
*/


SELECT substring('Function substring', 9); # start end 
# return substring

SELECT SUBSTR('Function substring' FROM 9);
# return substring

SELECT length(substring('Function substring', 1, 9)),substring('Function substring', 1, 9) # Добавити alias
UNION ALL 
SELECT length(substring('Function substring', 1, 10)), substring('Function substring', 1, 10);
# return Function 

SELECT length('Name'); # 1...len(n)

SELECT substring('Function substring'  FROM 1 FOR 4);
# return Func

SELECT substring('Function substring', 9);
# return substring

SELECT substring('Function substring' ,-4,  4);
/* Func -> 
			index 1: f, 
            index 2: u,
            index 3: n,
            index 4: c
	Func -> 
			index -1 : c ,
            index -2 : n,
            index -3 : u
#
# return ing

*/

SELECT substring('Function substring' FROM  -3 FOR 3);
# return ing

SELECT substring('Hello World!', -6 );

                
# substring - отримати 3 символа(last) з фрази 'I love sql'
SELECT substring('I love sql', -3);

SELECT substring('I love sql' FROM -3 FOR 3);

SELECT SUBSTR('Hello', 7); # Поверне Null, тому що макс індекс 5, вводе більше ніж 5 буде Null


# Вивести значення другого слова з фрази 'Function substring from'
SELECT LENGTH('Function ') , LENGTH('substring');

SELECT substring('Function substring from' FROM 9 FOR 10 );

SELECT SUBSTR('Function substring from' FROM 
length('Function ') FOR length('substring') + 1);

WITH RECURSIVE cte1 as (
	select SUBSTR('Function', 1, 1) string, 1 n , 'Function' word
    union all
    select SUBSTR(word, 1, n + 1), n + 1,  word
    from cte1
    where n <= length(word)
)
select *
from cte1;


SELECT dept_no, SUBSTR(dept_name, 1, 1),  dept_name
 FROM departments;
 

# Task 1. К кожному співробітнику вивезти його ініціали у форматі Some Name = S.N
SELECT emp_no, 
	first_name, 
    last_name, 
    concat(substring(first_name, 1, 1),"." ,substring(last_name, 1, 1)) inital
FROM employees;

 SELECT ee.emp_no, ee.first_name, ee.last_name, init.Initials
FROM 
 employees as ee
 LEFT JOIN (SELECT emp_no,
				CONCAT(
								SUBSTR(first_name, 1 , 1), '.' ,SUBSTR(last_name, 1 , 1)) AS Initials 
				FROM employees) as init 
                USING(emp_no);

/*
	REVERSE - перевернути строку 
    REVERSE (аргумент)
*/
# user1name:userdate:userage:userpass

SELECT REVERSE('Name'),REVERSE('annb');


SELECT REVERSE(REVERSE('Name'));

SELECT LOWER('NaMe'), UPPER('NaMe'), 'name' = 'NAME';

# AnnA - lower() - Anna = annA
# Task 1. Перевірити і вивезти всіх співробітників, у кого імя палідром
SELECT *, LOWER(first_name) AS l_first_name
FROM employees
WHERE LOWER(first_name) = LOWER(REVERSE(first_name));
