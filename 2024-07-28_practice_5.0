/*
	Add lesson: Join and Aggregation function 
    
    Topic:
		1. Type of Join: Inner/Left/Right/Cross/Self/Natural
		2. Set Operation: Union/Union All  
    
    Materials:
		1. Join: https://learnsql.com/blog/sql-joins-types-explained/
        2. Join: https://medium.com/@datasciencenexus/mastering-sql-joins-introduction-to-mysql-joins-c4324b3a4311
        3. Aggregation function: https://learnsql.com/blog/aggregate-functions/
        4. Aggregation function: https://www.w3schools.com/sql/sql_count_avg_sum.asp
        
*/
# USING - one column, one name for both table
# ON - many column, diff name fot both table

# 1 - simple join (one table)
SELECT emp_no
FROM employees AS ee
INNER JOIN dept_emp AS ede USING(emp_no); -- Join database_name.table_name
  


# 2 - multiple join ( two table and more)
SELECT # 6
	ee.gender
FROM 
	employees AS ee # 1
INNER JOIN 
	dept_emp AS ede USING(emp_no) # 2
INNER JOIN 
	salaries AS es USING(emp_no) # 3
WHERE # 4
	ee.hire_date  BETWEEN '1986-01-01' AND '1986-12-31'
GROUP BY # 5
	ee.gender
HAVING # 7
	es.salary > 90000
ORDER BY ee.gender # 8
;

# Inner Join - Inner/Join/Old style
/*
		Inner Join 
	id			id_sec			result_table
	1			3						3 - 3
	2			4						4 - 4
    3			5	
    4			6
    
    */
# Inner Join - inner опционл
SELECT *
FROM employees AS ee
INNER JOIN dept_emp AS ede USING(emp_no);


# Join
SELECT *
FROM employees AS ee
JOIN dept_emp AS ede USING(emp_no);


# Old style - in where block
SELECT *
FROM employees AS ee, dept_emp AS ede; # 1 # cross-join 
-- WHERE ee.emp_no = ede.emp_no; # 2


# Left Join - One style to write, перетин + ліва 
/*
				Left Join 
	id			id_sec 			result_table
    1				3					
    2				4					
    3				5					
    4				6				
*/
SELECT *
FROM employees AS ee # Ліва таблиця 
LEFT JOIN salaries AS ede USING(emp_no) # Права таблиця
WHERE ede.emp_no IS NULL ;  # IS NOT NULL/IS NULL


# Right Join 
/*
			Right Join
    	id			id_sec 			result_table
    1				3					3 - 3
    2				4		 			4 - 4
    3				5					NULL - 5
    4				6					NULL - 6

*/
SELECT *
FROM salaries AS ee # Ліва таблиця 
RIGHT JOIN employees AS ede USING(emp_no)  # employees join salaries # Права таблиця
WHERE ee.emp_no IS NULL ;  # IS NOT NULL/IS NULL

# Union/Union all(duplicate) - set. 1 - number of columns is equal 2. type of date need = 
select 1 
union 
select 2;

# Full Join - Left + Right, left if value miss - NULL, right if value miss - NULL
/*
   LEFT + UNION + RIGHT
				Full Join
     	id			id_sec 			result_table
    1				3					1 - NULL, 2 - NULL, 3 - 3, 4 - 4, NULL - 5, NULL - 6
    2				4		 				
    3				5					
    4				6					
*/
SELECT *
FROM employees  # 1 
LEFT JOIN salaries USING(emp_no)  # 2
UNION  # 5 # Return: унікальну, Стовбці in all union block, type equal in union block 
SELECT   *
FROM employees # 3
RIGHT JOIN salaries USING(emp_no) # 4
LIMIT 100;

-- date, promocode -  2023-01-01 -> 2023-04-01 

WITH RECURSIVE cte1 as (
	select '2023-01-01' as date_
    union 
    select date_add(date_, interval 1 day) 
    from cte1 
    where date_add(date_, interval 1 day)  <  '2023-04-01'
)
select *
from cte1;
 
/*
		Cross - Join - декартовий добуток(по рядкам) 
        
        id 		id_sec
        1			1
        2			2
        3			3
        
        result 
        1	1
        1	2
        1	3
        2	1
		2	2
        2  3
        3	1
        3	2
        3	3
  /*


	Practise every day: 
    - https://datalemur.com (postgres )
    - https://leetcode.com
	- https://www.hackerrank.com
    - https://exercism.org/dashboard
    - https://www.w3schools.com/mysql/default.asp
    - https://www.codewars.com/dashboard
*/
SELECT *
FROM salaries
JOIN ( SELECT AVG(salary) FROM salaries) as avg_v;
  
/*
	Пріоритетність команд MySql
    SELECT -- 4
	FROM -- 1
	JOIN -- 2
	WHERE -- 3
	GROUP BY -- 5
	HAVING -- 6
	ORDER BY -- 7
	LIMIT -- 8
*/
    
    

/*
    1. Вивести Прізвище, посаду на поточний момент і назву відділу  співробітників  на поточний момент

	2. Вивести Ім'я та актуальну ЗП співробітників, для тих в кого відсутня, показати 0
	
    3. Вивести Ім'я та актуальну ЗП співробітників жіночої статі, для тих в кого відсутня, показати 0

	4. Вивести Ім'я, emp_no і максимальну ЗП співробітників жіночої статі, в кого сумарна ЗП понад 1 млн;
	
    5. Вивести Прізвище і період з/до за який вони отримували таку ЗП всіх співробітників в кого ЗП більше ніж середня ЗП по компанії;

	6. Вивести Прізвище і мінімальну ЗП кожного співробітника і максимальну ЗП по компанії(реалізувати двома способами);

	7. Вивести Ім'я співробітників, дату народження і періоди(з і до) 
		для тих в кого ЗП дорівняє максимальній заробітній платі за найперший звітний період(from_date)

	8. Вивести порядковий номер співробітників, період отримання ЗП(з і до), 
			хто працював на посаді, яка містить текст 'Engineer', 
			мав ЗП більше ніж середню серед співробітників, 
			які працювали на посаді, яка містить текст 'Staff';
            
	9. Вивести назви посад і відділів з дублікатами;
    
	10. Вивести, лише унікальні значення назви посад і відділів з характеристикою, з якої таблиці взята інформація;
    
	11. Вивести всіх чоловіків, хто працює в відділі 'Finance' в поточний момент, колонку з текстом 'Men' і нижче списком
всіх жінок, хто працював у відділі 'Production' на момент 1999-01-01 і колонку з текстом 'Women'

*/

        
