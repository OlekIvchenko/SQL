/*
	Lesson 11:  View and Set statement
    Date: 2024-08-08

    Topics:
        1. View
        2. Set stament
*/

/*
	Test: https://docs.google.com/forms/d/e/1FAIpQLScQ-28IWz_fMhThNCG8KNxNsDFTQG-3xnlLqZdd_9RuBllgWA/viewform
    test_view
*/
USE employees;

SELECT 
	*
FROM sim_cards;

# Task 1. Update Change_user to Capitalize case

# Task 1. 1
SELECT CONCAT(SUBSTRING(CHANGE_USER, 1, 1),  LOWER(SUBSTRING(CHANGE_USER, 2))) AS cat_
FROM 
		sim_cards;
        
# Task 1.2 
UPDATE sim_cards
SET 
	CHANGE_USER = CONCAT(SUBSTRING(CHANGE_USER, 1, 1),  LOWER(SUBSTRING(CHANGE_USER, 2)));
        
# Task 1.3 
SELECT *
FROM sim_cards;



# Task 2. Format date to normal date

SELECT STR_TO_DATE(CHANGE_DATE, '%d.%m.%Y %H:%i:%s')
FROM sim_cards;

# Task 3. Update change_date to datetime 
START TRANSACTION;


UPDATE sim_cards
SET CHANGE_DATE = STR_TO_DATE(CHANGE_DATE, '%d.%m.%Y %H:%i:%s');

SELECT *
FROM sim_cards;

COMMIT;

# Task 4. Change_user change type to varchar(255)
ALTER TABLE sim_cards
CHANGE COLUMN CHANGE_DATE change_date DATETIME;

ALTER TABLE sim_cards
CHANGE COLUMN CHANGE_USER change_user VARCHAR(255);

SELECT *
FROM sim_cards;

START TRANSACTION;


ROLLBACK; 

/*
 CASE WHEN 
*/
SELECT 
	CASE 
		WHEN EXTRACT(MONTH from  hire_date) IN (1, 2, 3) THEN '1 quarter'
        WHEN  EXTRACT(MONTH from hire_date) IN (4, 5, 6) THEN '2 quarter'
        WHEN  EXTRACT(MONTH from  hire_date) IN (7, 8, 9) THEN '3 quarter'
        WHEN  EXTRACT(MONTH from hire_date) IN (10, 11, 12) THEN '4 quarter'
	ELSE 'other'
	END AS quarter
    , CASE 
		WHEN EXTRACT(YEAR FROM hire_date) - EXTRACT(YEAR FROM birth_date) >= 60 THEN 'old_employee'
        ELSE 'young_employee'  END AS cat_
FROM
	employees
;


-- 1. Всіх діючих співробітників розбийте на сегменти залежно від віку в момент прийому на роботу:
-- до 25, 25-44, 45-54, 55 і старше, для кожного сегменту виведіть максимальну зарплату. В результаті
-- потрібно отримати два поля сегмент, максимальну зарплату в сегменті.
SELECT
	CASE 
		WHEN TIMESTAMPDIFF(YEAR, birth_date, hire_date) < 25 THEN 'less_25'
        WHEN TIMESTAMPDIFF(YEAR, birth_date, hire_date) BETWEEN 25 AND 44 THEN 'middle_25_44'
        WHEN TIMESTAMPDIFF(YEAR, birth_date, hire_date) BETWEEN 45 AND 54 THEN 'middle+_45-54' 
		WHEN TIMESTAMPDIFF(YEAR, birth_date, hire_date) >= 55 THEN 'old_55+'
        ELSE 'other' END AS age_segment
	, MAX(salary) AS m_salary
FROM 
	employees AS ee
INNER JOIN 
	salaries AS es ON ee.emp_no = es.emp_no AND CURDATE() BETWEEN es.from_date AND es.to_date
GROUP BY 1
;


/*
	View - Дозволяє працювати з таблицею через запит, данні не зберігаються, тільки отримуємо результат 
    CREATE VIEW назва AS  запит який повертає таблицю 
    
    Benefits:
		1. Doesn't take up storage
        2. Form of access control(Grant/Revoke)
        3. Less query
	
    Disadvantages:
        1. Only for read 
        2. Delete with restrict and cascade
        3. Complex query
    
*/


SELECT * FROM
employees;

DROP VIEW IF EXISTS test_view;

CREATE VIEW  test_view AS  # Створюємо view з назвою test_view, View - virtual table, stored seq, not date
SELECT emp_no
 FROM employees
 WHERE emp_no < 10050 AND gender = 'M';
 
 
SHOW TABLES; 

SELECT *
FROM information_schema.views # Display all view
WHERE table_schema <> 'sys';


SELECT * 
FROM test_view;


DROP VIEW IF EXISTS more_than_avg; # Видаляємо view


CREATE OR REPLACE VIEW more_than_avg AS  # Створюємо view з назвою more_than_avg, дозволяємо змінювати код 
SELECT ee.emp_no, ee.first_name, ee.last_name, es.salary
 FROM employees AS ee
 INNER JOIN  salaries AS es USING(emp_no)
 WHERE es.salary > (SELECT AVG(salary) FROM salaries);
 
 SELECT  * FROM 
 more_than_avg
 WHERE emp_no != 10001;
 
 ALTER VIEW more_than_avg AS  # Або оновити запит за допомогою alter
       SELECT ee.emp_no, ee.first_name, ee.last_name
		FROM employees AS ee
		INNER JOIN  salaries AS es USING(emp_no)
		WHERE es.salary > (SELECT AVG(salary) FROM salaries);
 
 SELECT * 
 FROM more_than_avg;

/*
		Materialized  / Non-materialized views
        
        Materialized:
			1. Fast query (Save result  table or file)
            2. For read, best if data not so often  to change(not auto update result)
		
        Non-materialized:
			1. Less memory
            2. For often update data
        
*/



/*
	SET - задати значення змінної 
    
    SET @назва_змінної = значення 
    АБО 
    SET @назва_змінної := значення 
    
*/
SET @counter = 100; # Статично вказуємо значення змінної

SELECT @counter;


SHOW SESSION VARIABLES;


SHOW  GLOBAL VARIABLES;


SET @count := 10; # Інший спосіб вказати значення 

SELECT @count;

SELECT 
	@msrp  := MAX(salary) # Передаємо значення з таблицю в змінну 
FROM 
	salaries;

select @msrp;

SELECT *
FROM salaries
WHERE salary = @msrp;

SET @cur = CURDATE();

SELECT @cur;

 
SELECT *
FROM employees
WHERE gender = 'M' AND hire_date < @cur;

SET @gender_m = 'M';
   
   SELECT 
	@avgsrp  := AVG(salary) # Передаємо значення з таблицю в змінну 
FROM 
	salaries
    ;
    
SELECT @msrp; 

# Знайдіть всіх співроб, у кого маx зп
SELECT *
FROM employees 
WHERE emp_no IN (
SELECT emp_no FROM salaries 
WHERE salary = @msrp); # Використовуємо змінну 


# Task 1. Попередній запит реалізувати без змінних
SELECT *
FROM salaries;

SELECT MAX(salary) 
FROM salaries;

SELECT * 
FROM salaries 
WHERE 
salary = ( SELECT MAX(salary) FROM salaries);


SELECT *
FROM employees
WHERE emp_no IN (
	SELECT emp_no
	FROM salaries 
	WHERE 
	salary = ( SELECT MAX(salary) FROM salaries));
    
    
# Task 2. Використати змінну, показати всю інформацію про співпробітника для всіх чоловіків, кто працює на поточний момент

SELECT POW(25, 0.5);

SET @gender_male = 'M';

SET @curtime = current_date();

# Варіант студента 
SELECT 
 @meninfo  := first_name, last_name, hire_date
 FROM employees AS ee
 INNER JOIN dept_emp AS ede USING(emp_no)
 WHERE ee.gender = "M"
 AND CURDATE() BETWEEN ede.from_date AND ede.to_date;

 
SELECT 
	@emp_no := emp_no
FROM 
employees 
WHERE gender = 'm' ;

SELECT * 
FROM salaries 
WHERE emp_no IN (@emp_no);


SELECT ee.emp_no, ee.first_name, ee.last_name, ee.gender, es.to_date
FROM employees AS ee
INNER JOIN salaries  AS es USING(emp_no) 
WHERE  
	gender  =  @gender_male 
    AND
	@curtime BETWEEN  es.from_date AND es.to_date;
 
 SELECT 
	@agv := avg(salary)
FROM salaries;


 /*
	More information about IF and Case
    IF(statement cond, True, False )
 */
 SELECT IF(1 = 2,'true','false'); -- false

SELECT IF(1 = 1,'true','false'); -- true


SELECT * FROM
 employees.dept_manager_dup;



SELECT *, IF(dept_no IS NULL, 'N/A', dept_no) dept_no,
-- count(IF ( dept_no IS NULL, 1 , null  ))
FROM dept_manager_dup;


SELECT 
    SUM(IF(title = 'Staff', 1,0 )) AS Staff,
    SUM(IF(title = 'Senior Staff', 1, 0)) AS 'Senior Staff'
FROM
    titles;
    
SELECT title, COUNT(title)
FROM titles
GROUP BY title;


SELECT 
    COUNT(IF(title = 'Assistant Engineer', 1, NULL)) 'Assistant Engineer',
    COUNT(IF(title = 'Senior Staff', 1, NULL)) 'Senior Staff',
    COUNT(IF(title = 'Engineer', 1, NULL)) 'Engineer',
    COUNT(IF(title = 'Staff', 1, NULL)) 'Staff',
    COUNT(IF(title = 'Technique Leader', 1, NULL)) 'Technique Leader',
    COUNT(IF(title = 'Senior Engineer', 1, NULL)) 'Senior Engineer',
    COUNT(IF(title = 'Manager', 1, NULL)) 'Manager'
FROM
    titles;
    
SELECT SUM(CASE WHEN title = 'Staff' THEN 1 ELSE 0 END) AS Staff,
               SUM(CASE WHEN title = 'Senior Staff' THEN 1 ELSE 0 END) AS 'Senior Staff'
FROM titles;
