
/*
	Lesson 6-7. DML - DDL operation 

	Date: 2024-08-01

	Topics:
		1. Update
		2. Insert
		3. TRANSACTION(TCL)
		4. Delete
		5. TRUNCATE(DDL)
	    6. CRUD

	Materials:
		1. TRANSACTION: https://www.freecodecamp.org/news/how-to-use-mysql-transactions/
		2. DML: https://onecompiler.com/tutorials/mysql/commands/dml-commands
		3. DDL: https://medium.com/@molly-nakalyango/mysql-ddl-commands-using-mysql-workbench-927bd47d62b0
*/


# DROP - delete struct 
DROP DATABASE IF EXISTS lesson_7;

# CREATE - table, database
CREATE DATABASE IF NOT EXISTS lesson_7;

-- CREATE DATABASE lesson_7;

USE lesson_7; # <db_name>

SHOW TABLES;

SELECT *
FROM dept_emp;


SELECT * 
FROM employees;

# DML(Data Manipulation Language) - Select(DQL), Insert, Update, Delete
# DDL(Data Definition Language) - Create, Alter, Drop, Rename
# DCL(Data Control Language) - Grant, Revake
# TCL(Transaction Control Language) - Savepoint, Commit, Rollback 

/* CRUD 
	Create
    Read/Rewrite 
    Update
    Delete 
*/

# DROP TABLE tasks;

select 1 + 1;


CREATE TABLE  IF NOT EXISTS tasks (
	task_id INT AUTO_INCREMENT, # +1 
	title VARCHAR(255) NOT NULL, 
    start_date DATE,
    due_date DATE,
    priority TINYINT NOT NULL DEFAULT 3,
    description TEXT,
    PRIMARY KEY(task_id)
);
    

 DESC tasks; #  Показати структуру

SELECT *
FROM tasks;


# INSERT - добавить значение

INSERT INTO tasks VALUES ('Learn mysql INSERT', 1);


# Добавить данные в таблицу(перечислить колонки)  
INSERT INTO tasks(title, priority) 	VALUES 
						('Learn mysql INSERT', 1);
                        
SELECT *
FROM tasks;


INSERT INTO tasks(title) 	VALUES 
						('Learn mysql INSERT without prio');
                        
SELECT * 
FROM tasks;

INSERT INTO tasks(title, priority)
VALUES ('Learn mysql INSERT with Default', DEFAULT); # Звертаемся до default значення

SELECT * 
FROM tasks;

INSERT INTO tasks(start_date, priority) 	
VALUES (NOW(), 1); # будет ошибки из за NOT NULL


INSERT INTO tasks(title, start_date, due_date, priority, description)
 VALUES ('Learn mysql INSERT', CURRENT_DATE(),CURRENT_DATE(),1, 'test');

SELECT * 
FROM tasks;

# Якщо потрібно більше ніж один раз вставити значення
INSERT INTO tasks VALUES 
								(8,'Learn mysql INSERT', CURRENT_DATE(),CURRENT_DATE(),1 ,'test2'),
                                (9,'Learn mysql INSERT', CURRENT_DATE(),CURRENT_DATE(), 2, 'test3'),
                                (10,'Learn mysql INSERT', CURRENT_DATE(),CURRENT_DATE(), 4 ,'test4'),
                                (12,'Learn mysql INSERT', CURRENT_DATE(),CURRENT_DATE(), 5 , 'test5');

SELECT *
FROM tasks;

INSERT INTO tasks(task_id, title) VALUES 
								(10001, 'Insert task_id');
					
                    
INSERT INTO tasks(title) VALUES 
								('Return Id 10002 task_id');

DESC tasks;

SELECT *
 FROM tasks;


INSERT INTO tasks(title, start_date, due_date, description)  VALUES
								('Learn mysql INSERT', CURRENT_DATE(),CURRENT_DATE(),'test2');
					
                    
INSERT INTO tasks(title) VALUES ('Try default');


INSERT INTO tasks(title, priority)  # Вставка автоматична
SELECT dept_name, 1
FROM employees.departments;INSERT INTO tasks(title, priority)  # Вставка автоматична
SELECT dept_name, 1
FROM employees.departments;

SELECT *
 FROM tasks;

INSERT INTO tasks(title, priority)  VALUES
('Count of deparments', (SELECT COUNT(dept_name) FROM employees.departments));

SELECT * 
FROM tasks;
 
 SELECT NOW(), CURDATE();
 
 /*
	Task 1. Try Insert
	Вставити в таблицю Tasks - значення назви(title) 'test', пріорітет - використати дефолтний 
    дата_до якої виконати - поточна
    дата початку - 5 років від поточної 
 */
INSERT INTO tasks(title, start_date) VALUES ('test', now());

INSERT INTO tasks(title, start_date, due_date, priority)
VALUES ('test', curdate(), date_sub(curdate(), interval 5 year), default);


SELECT ee.emp_no, AVG(salary) as avg_sal
FROM employees.employees AS ee
INNER JOIN employees.salaries AS es USING(emp_no)
WHERE gender = 'M' 
GROUP BY ee.emp_no
HAVING  avg_sal  > 
 (SELECT AVG(es.salary)
FROM employees.employees AS ee
LEFT JOIN employees.salaries AS es 
ON (ee.emp_no = es.emp_no)
WHERE gender = 'F')
;
 
 DESC tasks;
 

 
 INSERT INTO tasks(title, start_date, priority,due_date) VALUES
 ('test', CURRENT_DATE(), DEFAULT,  DATE_SUB(curdate(), INTERVAL 5 year));
  
  
 SELECT * FROM tasks;
 
# DROP TABLE stats;


CREATE TABLE IF NOT EXISTS stats (
    c1 INT,
    c2 INT,
    c3 INT
);

DESC stats;

SELECT * 
FROM stats;

INSERT INTO stats(c1,c2,c3)
VALUES( 
					(SELECT MAX(salary) FROM employees.salaries),
                    (SELECT COUNT(emp_no) FROM employees.employees),
                    (SELECT MIN(salary) FROM employees.salaries) ) ;


SELECT * 
FROM stats;

# DROP TABLE emplo_dup1;

CREATE TABLE  lesson_7.emplo_dup1 
LIKE # Скопіювати структуру наступної таблиці
employees.employees;


DESC employees.employees;

SELECT * FROM
 emplo_dup1;

DESC emplo_dup1;

INSERT INTO emplo_dup1
SELECT *
FROM employees.employees
WHERE emp_no % 2 = 0
LIMIT 100;

SELECT * FROM
 emplo_dup1;

# Повністю очистити данні з таблиці - truncate(ddl operation)
TRUNCATE  TABLE lesson_7.emplo_dup1;


SELECT * FROM 
emplo_dup1;


INSERT INTO emplo_dup1 
SELECT * 
FROM employees.employees 
WHERE emp_no > 10050;


SELECT * 
FROM emplo_dup1;


# 0 - дія WHERE  
SELECT * 
FROM emplo_dup1;

# 1 - дія 
SELECT * 
FROM emplo_dup1 
WHERE emp_no = 10051;

# 2 - дія
UPDATE emplo_dup1  # обираемо таблицю
SET  # вказати зміну
first_name  = 'new name', last_name = 'new last name' 
WHERE emp_no = 10051 OR emp_no = 10052;

SELECT *
FROM emplo_dup1;


UPDATE emplo_dup1  # обираемо таблицю
SET  # вказати зміну
gender  = 'F', last_name = 'test' 
WHERE emp_no = 10051;

SELECT * 
FROM emplo_dup1;



UPDATE emplo_dup1 
SET 
				first_name  = (SELECT first_name FROM employees.employees ORDER BY first_name ASC LIMIT 1),
				last_name = 'New last name',
				hire_date = CURRENT_DATE()
WHERE emp_no = 10053;


SELECT * 
FROM emplo_dup1;

/*
	Змінити дату прийняття на роботу, 
    для всіх у кого id більше 10050 і рік прийняття на роботу більше ніж 1990
    hire_date - на поточну
*/
SELECT *
FROM emplo_dup1
WHERE YEAR(hire_date) > 1990;

UPDATE emplo_dup1
SET
	hire_date = CURRENT_DATE()
WHERE emp_no > 10050 AND hire_date > '1990-01-01';


SELECT * 
FROM emplo_dup1;


# Update - дві і більше таблиці
CREATE TABLE salaries_dup LIKE employees.salaries;

DESC salaries_dup;

INSERT INTO salaries_dup
SELECT *
FROM employees.salaries
WHERE emp_no > 10050 OR salary > 150000;

SELECT *
 FROM salaries_dup;

DESC salaries_dup;

DROP TABLE IF EXISTS lesson_7.titles_dup;
DROP TABLE IF EXISTS  lesson_7.salaries_dup;

CREATE TABLE lesson_7.titles_dup LIKE employees.titles;

INSERT INTO titles_dup
SELECT *
FROM employees.titles
WHERE emp_no > 10050;

SELECT * 
FROM titles_dup;

SHOW TABLES;


UPDATE emplo_dup1
INNER JOIN lesson_7.titles_dup USING(emp_no)
SET
first_name = title, 
last_name = title,
hire_date = from_date
WHERE NOW() BETWEEN from_date AND to_date AND length(titles_dup.title) < 10;


SELECT * 
FROM emplo_dup1;


SELECT * FROM titles_dup;

UPDATE emplo_dup1  
INNER JOIN lesson_7.salaries_dup USING(emp_no)
SET
 first_name = 'some_test_valu',
salary = salary - 100000
WHERE
salary > 80000;

SELECT * FROM emplo_dup1;

SELECT * FROM salaries_dup;


# Best practice 
START TRANSACTION;

SELECT *
 FROM emplo_dup1;

UPDATE emplo_dup1 SET 
first_name  = 'You name',
last_name = 'New last name',
hire_date = CURRENT_DATE();

SELECT *
 FROM emplo_dup1;

ROLLBACK; # COMMIT;


SELECT *
FROM emplo_dup1;


# Delete 
SELECT *
 FROM emplo_dup1;

DELETE 
FROM emplo_dup1
WHERE emp_no = 10051;

SELECT * 
FROM emplo_dup1;

DELETE 
FROM emplo_dup1
ORDER BY emp_no asc
LIMIT 5;

SELECT * 
FROM emplo_dup1;

DELETE
FROM emplo_dup1
WHERE emp_no BETWEEN 10057 AND 10067
ORDER BY emp_no ASC
LIMIT 5; 

SELECT * FROM emplo_dup1;

# DROP TABLE emplo_dup2;
DROP TABLE emplo_dup1;

CREATE TABLE emplo_dup1 LIKE employees.employees;

INSERT INTO emplo_dup1
SELECT * FROM employees.employees WHERE emp_no < 10050;

CREATE TABLE emplo_dup2 LIKE employees.employees;

INSERT INTO emplo_dup2
SELECT * FROM employees.employees WHERE emp_no < 10050;

DESC emplo_dup2;

SELECT *
FROM emplo_dup2;

SELECT * FROM lesson_7.emplo_dup1 AS  d1
INNER JOIN lesson_7.emplo_dup2 AS d2 USING(emp_no);


DELETE d1.*, d2.*
FROM lesson_7.emplo_dup1 AS  d1
INNER JOIN lesson_7.emplo_dup2 AS d2 USING(emp_no);

SELECT * 
FROM emplo_dup1;

SELECT * FROM emplo_dup2;

START TRANSACTION;

SELECT * FROM emplo_dup2;

TRUNCATE TABLE emplo_dup2; # Не транзакційна операція 

SELECT * FROM emplo_dup2;

ROLLBACK;

SELECT * 
FROM emplo_dup2;

/*
	Tasks
    1. Create database with name: test_db
    2. Create tables like: employees with name: emplo_test, titles with name: titles_test
    3. Insert data in two tables using insert with select 
    4. Update rows for 10051, change name to 'Test', birth_Date to current_Date, and do this for 10056 to 10061
    5. Delete rows from 10051
    * Optinal: use fast way to delete all rows in all tables
*/
# Task 1
CREATE DATABASE IF NOT EXISTS test_db;

USE test_db;

# Task 2
CREATE TABLE IF NOT EXISTS emplo_test LIKE employees.employees;

DESC emplo_test; 

SELECT *
FROM emplo_test;

# Task 2.1
CREATE TABLE IF NOT EXISTS titles_test LIKE employees.titles;

DESC titles_test; 

SELECT *
FROM titles_test;


# Task 3. Insert data in two tables using insert with select 
# 1
START TRANSACTION;


INSERT INTO emplo_test
SELECT *
FROM employees.employees;

SELECT *
FROM emplo_test
LIMIT 10;

# 1.1
SAVEPOINT insert_emplo_test;


INSERT INTO titles_test
SELECT *
FROM employees.titles;

SELECT *
FROM  titles_test
LIMIT 10;

# 1.2
SAVEPOINT insert_titles_test;

# finish 
COMMIT;  # ROLLBACK


--   4. Update rows for 10051, change name to 'Test', birth_Date to current_Date, and do this for 10056 to 10061
START TRANSACTION;


SAVEPOINT emplo_test;

UPDATE emplo_test
SET first_name = 'Test', birth_date = curdate()
WHERE 	emp_no = 10051 or emp_no BETWEEN 10056 AND 10061;
	
SELECT *
FROM emplo_test;

ROLLBACK TO emplo_test; 

--  5. Delete rows from 10051

SAVEPOINT delete_emp_no;

DELETE 
FROM emplo_test
WHERE emp_no > 10051;

SELECT *
FROM emplo_test;

COMMIT;


START TRANSACTION;


DELETE 
FROM emplo_test;


SELECT *
FROM emplo_test;

ROLLBACK;

TRUNCATE emplo_test;
