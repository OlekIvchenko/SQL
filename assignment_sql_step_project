-- SQL степ-проект 
-- Запити
-- 1. Покажіть середню зарплату співробітників за кожен рік, до 2005 року.
SELECT 
    YEAR(es.from_date) AS report_year,
    ROUND(AVG(es.salary), 2) AS avg_salary
FROM 
    employees.salaries AS es
WHERE 
    es.to_date <= '2005-12-31'
GROUP BY 
    report_year
HAVING 
    report_year BETWEEN MIN(YEAR(es.from_date)) AND 2005
ORDER BY 
    report_year;
    
-- 2. Покажіть середню зарплату співробітників по кожному відділу. Примітка: потрібно розрахувати по поточній зарплаті, та поточному відділу співробітників
SELECT 
    ed.dept_name,
    ROUND(AVG(es.salary), 2) AS avg_salary
FROM 
    employees.employees AS ee
JOIN employees.dept_emp AS ede ON ee.emp_no = ede.emp_no
JOIN employees.departments AS ed ON ede.dept_no = ed.dept_no
JOIN employees.salaries AS es ON ee.emp_no = es.emp_no
WHERE 
    ede.to_date = '9999-01-01'
    AND es.to_date = '9999-01-01'
GROUP BY 
    ed.dept_name
ORDER BY 
    avg_salary DESC;

-- 3. Покажіть середню зарплату співробітників по кожному відділу за кожний рік
SELECT 
    ed.dept_name,
    YEAR(es.from_date) AS report_year,
    ROUND(AVG(es.salary), 2) AS avg_salary
FROM 
    employees.salaries AS es
JOIN employees.dept_emp AS ede ON es.emp_no = ede.emp_no
JOIN employees.departments AS ed ON ede.dept_no = ed.dept_no
WHERE 
    es.from_date <= ede.to_date 
    AND ede.from_date <= es.to_date
GROUP BY 
    ed.dept_name, report_year
ORDER BY 
    report_year, ed.dept_name;

-- 4. Покажіть відділи в яких зараз працює більше 15000 співробітників.
SELECT 
    ed.dept_no,
    ed.dept_name,
    COUNT(ede.emp_no) AS employee_count
FROM 
    employees.departments AS ed
JOIN employees.dept_emp AS ede ON ed.dept_no = ede.dept_no
WHERE 
    ede.to_date = '9999-01-01'
GROUP BY 
    ed.dept_no, ed.dept_name
HAVING 
    employee_count > 15000
ORDER BY 
    ed.dept_no;
    
-- 5. Для менеджера який працює найдовше покажіть його номер, відділ, дату прийому на роботу, прізвище
SELECT 
    edm.emp_no AS manager_no,
    ed.dept_no,
    ed.dept_name,
    ee.hire_date,
    ee.last_name,
    DATEDIFF(CURDATE(), ee.hire_date) AS days_worked
FROM 
    employees.dept_manager AS edm
JOIN employees.employees AS ee ON edm.emp_no = ee.emp_no
JOIN employees.departments AS ed ON edm.dept_no = ed.dept_no
WHERE 
    edm.to_date = '9999-01-01'  -- Поточні менеджери
ORDER BY 
    days_worked DESC
LIMIT 1;

-- 6. Покажіть топ-10 діючих співробітників компанії з найбільшою різницею між їх зарплатою і середньою зарплатою в їх відділі.
WITH avg_dept_salary AS (
    SELECT 
        ede.dept_no,
        ROUND(AVG(es.salary), 2) AS avg_salary
    FROM 
        employees.dept_emp AS ede
    JOIN employees.salaries AS es ON ede.emp_no = es.emp_no
    WHERE 
        ede.to_date = '9999-01-01' AND
        es.to_date = '9999-01-01'
    GROUP BY 
        ede.dept_no
)
SELECT 
    ee.emp_no,
    ee.first_name,
    ee.last_name,
    ed.dept_name,
    es.salary AS employee_salary,
    ads.avg_salary AS dept_avg_salary,
    ROUND(es.salary - ads.avg_salary, 2) AS salary_difference
FROM 
    employees.employees AS ee
JOIN employees.dept_emp AS ede ON ee.emp_no = ede.emp_no
JOIN employees.departments AS ed ON ede.dept_no = ed.dept_no
JOIN employees.salaries AS es ON ee.emp_no = es.emp_no
JOIN avg_dept_salary AS ads ON ede.dept_no = ads.dept_no
WHERE 
    ede.to_date = '9999-01-01' AND
    es.to_date = '9999-01-01'
ORDER BY 
    salary_difference DESC
LIMIT 10;

-- 7. Для кожного відділу покажіть другого по порядку менеджера. Необхідно вивести відділ, прізвище ім’я менеджера, дату прийому на роботу менеджера і дату коли він став менеджером відділу
SELECT 
    dept_name,
    last_name,
    first_name,
    hire_date,
    from_date AS manager_start_date
FROM (
    SELECT 
        ed.dept_name,
        ee.last_name,
        ee.first_name,
        ee.hire_date,
        edm.from_date,
        ROW_NUMBER() OVER (PARTITION BY ed.dept_no ORDER BY edm.from_date) AS manager_rank
    FROM 
        employees.dept_manager AS edm
    JOIN employees.departments AS ed ON edm.dept_no = ed.dept_no
    JOIN employees.employees AS ee ON edm.emp_no = ee.emp_no
) ranked_managers
WHERE 
    manager_rank = 2
ORDER BY 
    dept_name;

-- 1. Створіть базу даних для управління курсами. База має включати наступні таблиці:
-- - students: student_no, teacher_no, course_no, student_name, email, birth_date.
-- - teachers: teacher_no, teacher_name, phone_no
-- - courses: course_no, course_name, start_date, end_date

DROP DATABASE IF EXISTS course_management;
CREATE DATABASE IF NOT EXISTS course_management;
USE course_management;

CREATE TABLE IF NOT EXISTS teachers (
    teacher_no INT AUTO_INCREMENT PRIMARY KEY,
    teacher_name VARCHAR(100),
    phone_no VARCHAR(20)
);

CREATE TABLE IF NOT EXISTS courses (
    course_no INT AUTO_INCREMENT PRIMARY KEY,
    course_name VARCHAR(100),
    start_date DATE,
    end_date DATE
);

CREATE TABLE IF NOT EXISTS students (
    student_no INT AUTO_INCREMENT PRIMARY KEY,
    teacher_no INT,
    course_no INT,
    student_name VARCHAR(100),
    email VARCHAR(100),
    birth_date DATE,
    FOREIGN KEY (teacher_no) REFERENCES teachers(teacher_no),
    FOREIGN KEY (course_no) REFERENCES courses(course_no)
);

-- 2. Додайте будь-які данні (7-10 рядків) в кожну таблицю.
START TRANSACTION;

INSERT INTO teachers (teacher_name, phone_no) VALUES
('Іван Петренко', '+380501234567'),
('Марія Коваленко', '+380672345678'),
('Олег Сидоренко', '+380633456789'),
('Тетяна Шевченко', '+380994567890'),
('Андрій Мельник', '+380505678901'),
('Ольга Коваль', '+380676789012'),
('Сергій Бондаренко', '+380637890123');

INSERT INTO courses (course_name, start_date, end_date) VALUES
('Основи програмування', '2024-09-01', '2024-12-20'),
('Веб-дизайн', '2024-09-15', '2024-12-15'),
('Бази даних', '2024-10-01', '2025-01-31'),
('Машинне навчання', '2024-11-01', '2025-03-31'),
('Мобільна розробка', '2025-02-01', '2025-05-31'),
('Кібербезпека', '2025-03-01', '2025-06-30'),
('DevOps практики', '2025-04-01', '2025-07-31');

INSERT INTO students (teacher_no, course_no, student_name, email, birth_date) VALUES
(1, 1, 'Олексій Сидоренко', 'oleksiy@gmail.com', '2000-05-15'),
(2, 2, 'Наталія Шевченко', 'natalia@gmail.com', '2001-03-20'),
(3, 3, 'Віктор Ковальчук', 'viktor@gmail.com', '1999-11-10'),
(4, 4, 'Ірина Мороз', 'iryna@gmail.com', '2002-07-25'),
(5, 5, 'Дмитро Лисенко', 'dmytro@gmail.com', '2000-09-30'),
(6, 6, 'Юлія Павленко', 'yuliia@gmail.com', '2001-12-05'),
(7, 7, 'Максим Григоренко', 'maksym@gmail.com', '1998-08-18'),
(1, 2, 'Анна Кравченко', 'anna@gmail.com', '2003-02-14'),
(2, 3, 'Володимир Зінченко', 'volodymyr@gmail.com', '1999-06-22'),
(3, 4, 'Софія Романенко', 'sofia@gmail.com', '2002-04-11');

COMMIT;

# SELECT *
# FROM course_management.courses;

# SELECT *
# FROM course_management.students;

# SELECT *
# FROM course_management.teachers;

-- 3. По кожному викладачу покажіть кількість студентів з якими він працював
SELECT 
    cmt.teacher_no,
    cmt.teacher_name,
    COUNT(DISTINCT cms.student_no) AS student_count
FROM 
    course_management.teachers AS cmt
LEFT JOIN 
    course_management.students AS cms ON cmt.teacher_no = cms.teacher_no
GROUP BY 
    cmt.teacher_no, cmt.teacher_name
ORDER BY 
    cmt.teacher_no;

-- 4. Спеціально зробіть 3 дубляжі в таблиці students (додайте ще 3 однакові рядки) 
INSERT INTO course_management.students (teacher_no, course_no, student_name, email, birth_date)
SELECT teacher_no, course_no, student_name, email, birth_date
FROM course_management.students
ORDER BY RAND()
LIMIT 3;

-- 5. Напишіть запит який виведе дублюючі рядки в таблиці students
SELECT 
    cms.teacher_no,
    cms.course_no,
    cms.student_name,
    cms.email,
    cms.birth_date,
    COUNT(*) AS duplicate_count
FROM 
    course_management.students AS cms
GROUP BY 
    cms.teacher_no,
    cms.course_no,
    cms.student_name,
    cms.email,
    cms.birth_date
HAVING 
    COUNT(*) > 1
ORDER BY 
    duplicate_count DESC,
    cms.student_name;
